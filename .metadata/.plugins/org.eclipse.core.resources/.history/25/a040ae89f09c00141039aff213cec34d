/*
* generated by Xtext
*/
package fr.istic.idm.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class QuestionnaireDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SondageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sondage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSondageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSondageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSondageQuestionnaireParserRuleCall_2_0 = (RuleCall)cSondageAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Sondage:
		//	"Sondage " "{" sondage+=Questionnaire+ "}";
		public ParserRule getRule() { return rule; }

		//"Sondage " "{" sondage+=Questionnaire+ "}"
		public Group getGroup() { return cGroup; }

		//"Sondage "
		public Keyword getSondageKeyword_0() { return cSondageKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//sondage+=Questionnaire+
		public Assignment getSondageAssignment_2() { return cSondageAssignment_2; }

		//Questionnaire
		public RuleCall getSondageQuestionnaireParserRuleCall_2_0() { return cSondageQuestionnaireParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class QuestionnaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Questionnaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionnaireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQuestionnaireAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuestionnaireQuestionParserRuleCall_3_0 = (RuleCall)cQuestionnaireAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Questionnaire:
		//	"Questionnaire " name=ID "{" questionnaire+=Question* "}";
		public ParserRule getRule() { return rule; }

		//"Questionnaire " name=ID "{" questionnaire+=Question* "}"
		public Group getGroup() { return cGroup; }

		//"Questionnaire "
		public Keyword getQuestionnaireKeyword_0() { return cQuestionnaireKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//questionnaire+=Question*
		public Assignment getQuestionnaireAssignment_3() { return cQuestionnaireAssignment_3; }

		//Question
		public RuleCall getQuestionnaireQuestionParserRuleCall_3_0() { return cQuestionnaireQuestionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Assignment cQuestionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQuestionOptionParserRuleCall_4_0 = (RuleCall)cQuestionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Question:
		//	"Question " name=ID "{" text=STRING question+=Option "}";
		public ParserRule getRule() { return rule; }

		//"Question " name=ID "{" text=STRING question+=Option "}"
		public Group getGroup() { return cGroup; }

		//"Question "
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//text=STRING
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_0() { return cTextSTRINGTerminalRuleCall_3_0; }

		//question+=Option
		public Assignment getQuestionAssignment_4() { return cQuestionAssignment_4; }

		//Option
		public RuleCall getQuestionOptionParserRuleCall_4_0() { return cQuestionOptionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTextAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cTextAssignment_1_2.eContents().get(0);
		
		//Option:
		//	"Options" (ID ":" text+=STRING)+;
		public ParserRule getRule() { return rule; }

		//"Options" (ID ":" text+=STRING)+
		public Group getGroup() { return cGroup; }

		//"Options"
		public Keyword getOptionsKeyword_0() { return cOptionsKeyword_0; }

		//(ID ":" text+=STRING)+
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//text+=STRING
		public Assignment getTextAssignment_1_2() { return cTextAssignment_1_2; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_2_0() { return cTextSTRINGTerminalRuleCall_1_2_0; }
	}
	
	
	private SondageElements pSondage;
	private QuestionnaireElements pQuestionnaire;
	private QuestionElements pQuestion;
	private OptionElements pOption;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public QuestionnaireDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.istic.idm.QuestionnaireDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Sondage:
	//	"Sondage " "{" sondage+=Questionnaire+ "}";
	public SondageElements getSondageAccess() {
		return (pSondage != null) ? pSondage : (pSondage = new SondageElements());
	}
	
	public ParserRule getSondageRule() {
		return getSondageAccess().getRule();
	}

	//Questionnaire:
	//	"Questionnaire " name=ID "{" questionnaire+=Question* "}";
	public QuestionnaireElements getQuestionnaireAccess() {
		return (pQuestionnaire != null) ? pQuestionnaire : (pQuestionnaire = new QuestionnaireElements());
	}
	
	public ParserRule getQuestionnaireRule() {
		return getQuestionnaireAccess().getRule();
	}

	//Question:
	//	"Question " name=ID "{" text=STRING question+=Option "}";
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Option:
	//	"Options" (ID ":" text+=STRING)+;
	public OptionElements getOptionAccess() {
		return (pOption != null) ? pOption : (pOption = new OptionElements());
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
