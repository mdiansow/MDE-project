package m2mplugin

import fr.istic.idm.CssDslStandaloneSetupGenerated
import fr.istic.idm.QuestionnaireDslStandaloneSetupGenerated
import fr.istic.idm.cssDsl.Css
import fr.istic.idm.cssDsl.impl.CssDslFactoryImpl
import fr.istic.idm.questionnaireDsl.Sondage
import java.util.HashMap
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.junit.Test
import pivotMM.UiModel
import pivotMM.Widget
import pivotMM.impl.PivotMMFactoryImpl

import static org.junit.Assert.*
import pivotMM.PivotMMFactory

class M2M {
	def loadQuestionnaireDsl(URI uri) {
		new QuestionnaireDslStandaloneSetupGenerated().createInjectorAndDoEMFRegistration()
		var res = new ResourceSetImpl().getResource(uri, true);
		res.contents.get(0) as Sondage
	}

	def loadCssDsl(URI uri) {
		new CssDslStandaloneSetupGenerated().createInjectorAndDoEMFRegistration()
		var res = new ResourceSetImpl().getResource(uri, true)
		res.contents.get(0) as Css
	}

	def savePollSystem(URI uri, UiModel pollS) {
		var Resource rs = new ResourceSetImpl().createResource(uri);
		rs.getContents.add(pollS);
		rs.save(new HashMap());
	}

	@Test
	def void loadTest() {
		var q = loadQuestionnaireDsl(URI.createURI("sample.q"))
		assertNotNull(q)

		val css = loadCssDsl(URI.createURI("sample.css"));
		assertNotNull(css);

		val model = new PivotMMFactoryImpl
		val modelImpl = model.createUiModel
		modelImpl.label = "Mon Questionnaire"
		val questionnaire = q.sondage.get(0)
		questionnaire.questionnaire.forEach [ p |
			val qName = p.name
			println("Question " + qName)
			val cssValue = css.css.findFirst[c|c.id.equals(qName)]
			// Récupération du type de widget.
			val widgetType = getWidgetType(cssValue.value, model)
			assertNotNull(widgetType)
			// Récupération du sondage.
			val question = p.question
			question.forEach[quest|println("ID " + cssValue.id + "\t" + cssValue.value)]
			//				println("\tRéponse \t" + quest.question.get(0).text)]
			widgetType.value
		]

	//
	//		q.sondage.forEach[monQ|println("Questionnaire  " + monQ.name)]
	//
	//		val Widget wid = model.createCheckBox
	//		wid.setValue("Bonjour")
	//		modelImpl.widgets.add(wid)
	//
	//		savePollSystem(URI::createURI("./Model.xmi"), modelImpl)
	//
	//		//check.var string = css.css.get(0);
	//		val monCss = new CssDslFactoryImpl
	//		val v = monCss.createCss
	//		val monCh = monCss.createWidget
	//		v.css.add(monCh)
	}

	def Widget getWidgetType(String name, PivotMMFactory pivot) {

		//	'CheckBox' | 'ComboBox' | 'TextField' | 'RadioButton'
		switch (name) {
			case "CheckBox":
				return pivot.createCheckBox
			case "ComboBox":
				return pivot.createComboBox
			case "TextField":
				return pivot.createTextField
			case "RadioButton":
				return pivot.createRadioButton
			default:
				return pivot.createTextField
		}
	}
}
