/*
* generated by Xtext
*/
grammar InternalCssDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.istic.idm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.istic.idm.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.istic.idm.services.CssDslGrammarAccess;

}

@parser::members {

 	private CssDslGrammarAccess grammarAccess;
 	
    public InternalCssDslParser(TokenStream input, CssDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Css";	
   	}
   	
   	@Override
   	protected CssDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCss
entryRuleCss returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCssRule()); }
	 iv_ruleCss=ruleCss 
	 { $current=$iv_ruleCss.current; } 
	 EOF 
;

// Rule Css
ruleCss returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Css ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCssAccess().getCssKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCssAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCssAccess().getCssWidgetParserRuleCall_2_0()); 
	    }
		lv_css_2_0=ruleWidget		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCssRule());
	        }
       		add(
       			$current, 
       			"css",
        		lv_css_2_0, 
        		"Widget");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCssAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleWidget
entryRuleWidget returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWidgetRule()); }
	 iv_ruleWidget=ruleWidget 
	 { $current=$iv_ruleWidget.current; } 
	 EOF 
;

// Rule Widget
ruleWidget returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getWidgetAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWidgetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWidgetAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
(
		lv_value_2_1=	'CheckBox' 
    {
        newLeafNode(lv_value_2_1, grammarAccess.getWidgetAccess().getValueCheckBoxKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWidgetRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_2_1, null);
	    }

    |		lv_value_2_2=	'ComboBox' 
    {
        newLeafNode(lv_value_2_2, grammarAccess.getWidgetAccess().getValueComboBoxKeyword_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWidgetRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_2_2, null);
	    }

    |		lv_value_2_3=	'TextField' 
    {
        newLeafNode(lv_value_2_3, grammarAccess.getWidgetAccess().getValueTextFieldKeyword_2_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWidgetRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_2_3, null);
	    }

    |		lv_value_2_4=	'RadioButton' 
    {
        newLeafNode(lv_value_2_4, grammarAccess.getWidgetAccess().getValueRadioButtonKeyword_2_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWidgetRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_2_4, null);
	    }

)

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


